name: app-backend-build-staging

on:
  # Build on PRs (from same repo) so reviewers can try the image
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, release/** ]
  # Build on merges to release/* (treat as staging)
  push:
    branches: [ release/** ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPO: spiritual-formation-backend   # Terraform created this

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    concurrency:
      group: app-backend-staging-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::756859458263:role/spiritual-staging-github-apprepo-build
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS account ID
        id: acct
        run: echo "id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Compute tags
        id: tags
        shell: bash
        run: |
          REPO="${{ steps.acct.outputs.id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          SHORT_SHA="${GITHUB_SHA::12}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Skip ECR push for PRs from forks (no OIDC perms)
            if [[ "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then
              echo "skip_push=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            PR="${{ github.event.pull_request.number }}"
            echo "repo=$REPO"        >> $GITHUB_OUTPUT
            echo "sha=$SHORT_SHA"    >> $GITHUB_OUTPUT
            echo "tag1=pr-${PR}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "push_latest=false" >> $GITHUB_OUTPUT
          else
            # push to release/* branches
            BRANCH="${GITHUB_REF_NAME}"
            SAFE_BRANCH="${BRANCH//\//-}"  # release/my-branch -> release-my-branch
            echo "repo=$REPO"        >> $GITHUB_OUTPUT
            echo "sha=$SHORT_SHA"    >> $GITHUB_OUTPUT
            echo "tag1=rel-${SAFE_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "push_latest=true"  >> $GITHUB_OUTPUT
          fi

      - name: Exit early for forked PRs
        if: steps.tags.outputs.skip_push == 'true'
        run: echo "Skipping ECR push for forked PR."

      - name: Login to Amazon ECR
        if: steps.tags.outputs.skip_push != 'true'
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin ${{ steps.acct.outputs.id }}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Set up Docker Buildx
        if: steps.tags.outputs.skip_push != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build & push (primary tag)
        if: steps.tags.outputs.skip_push != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tags.outputs.repo }}:${{ steps.tags.outputs.tag1 }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Tag & push "staging-latest" for release/* pushes
        if: steps.tags.outputs.push_latest == 'true'
        run: |
          docker pull ${{ steps.tags.outputs.repo }}:${{ steps.tags.outputs.tag1 }}
          docker tag  ${{ steps.tags.outputs.repo }}:${{ steps.tags.outputs.tag1 }} ${{ steps.tags.outputs.repo }}:staging-latest
          docker push ${{ steps.tags.outputs.repo }}:staging-latest

name: app-backend-build-staging

on:
  # Build on PRs (from same repo) so reviewers can try the image
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, release/** ]
    paths-ignore:
      - 'metadata/**'      # metadata changes don’t rebuild the image
  # Build on merges to release/* (treat as staging)
  push:
    branches: [ release/** ]
    paths-ignore:
      - 'metadata/**'      # metadata changes don’t rebuild the image
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPO: spiritual-formation-backend   # Terraform created this

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # decide tags AND whether to skip (forked PRs)
      - name: Compute tags
        id: tags
        shell: bash
        run: |
          SHORT_SHA="${GITHUB_SHA::12}"
          echo "sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then
              echo "skip_push=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "tag1=pr-${{ github.event.pull_request.number }}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "push_latest=false" >> $GITHUB_OUTPUT
          else
            SAFE_BRANCH="${GITHUB_REF_NAME//\//-}"
            echo "tag1=rel-${SAFE_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "push_latest=true" >> $GITHUB_OUTPUT
          fi

      - name: Exit early for forked PRs
        if: steps.tags.outputs.skip_push == 'true'
        run: echo "Skipping ECR push for forked PR."

      - name: Get OIDC token
        id: oidc
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const id = await core.getIDToken('sts.amazonaws.com');
            core.setOutput('token', id);

      - name: Show OIDC claims
        run: |
          python - <<'PY'
          import os, json, base64
          tok = os.environ['TOKEN']
          payload = tok.split('.')[1] + '=='
          print(json.dumps(json.loads(base64.urlsafe_b64decode(payload).decode()), indent=2))
          PY
        env:
          TOKEN: ${{ steps.oidc.outputs.token }}


      - name: Configure AWS (OIDC)
        if: steps.tags.outputs.skip_push != 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::756859458263:role/spiritual-staging-github-apprepo-build
          aws-region: us-east-1

      - name: Get AWS account ID
        if: steps.tags.outputs.skip_push != 'true'
        id: acct
        run: echo "id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        if: steps.tags.outputs.skip_push != 'true'
        run: |
          aws ecr get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin ${{ steps.acct.outputs.id }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Set up Docker Buildx
        if: steps.tags.outputs.skip_push != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build & push (primary tag)
        if: steps.tags.outputs.skip_push != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tags.outputs.repo }}:${{ steps.tags.outputs.tag1 }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Tag & push "staging-latest" for release/* pushes
        if: steps.tags.outputs.push_latest == 'true'
        run: |
          docker pull ${{ steps.tags.outputs.repo }}:${{ steps.tags.outputs.tag1 }}
          docker tag  ${{ steps.tags.outputs.repo }}:${{ steps.tags.outputs.tag1 }} ${{ steps.tags.outputs.repo }}:staging-latest
          docker push ${{ steps.tags.outputs.repo }}:staging-latest
